{"version":3,"sources":["components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/App.jsx","index.js","components/Statistics/Statistics.module.css","components/Section/Section.module.css"],"names":["Section","title","children","className","css","titleName","Statistics","good","neutral","bad","total","positivePercentage","names","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","isFeedbackGiven","e","target","dataset","action","prev","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAiBeA,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OACI,gCACI,oBAAIC,UAAWC,IAAIC,UAAnB,SAA+BJ,IAC9BC,M,gBCeEI,MAnBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,qCACI,oBAAGR,UAAWC,IAAIQ,MAAlB,mBAAgCL,KAChC,oBAAGJ,UAAWC,IAAIQ,MAAlB,sBAAmCJ,KACnC,oBAAGL,UAAWC,IAAIQ,MAAlB,kBAA+BH,KAC/B,oBAAGN,UAAWC,IAAIQ,MAAlB,oBAAiCF,KACjC,oBAAGP,UAAWC,IAAIQ,MAAlB,gCAA6CD,EAA7C,YCaGE,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAChC,OACI,8BACKD,EAAQE,KAAI,SAACC,GAAD,OACT,wBAEIC,KAAK,SACL,cAAaD,EACbE,QAASJ,EAJb,SAMKE,GALIA,SCGVG,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACpB,OAAO,4BAAIA,KC6DAC,MA3Df,WACI,MAAwBC,mBAAS,GAAjC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOf,EAAP,KAAgBiB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOd,EAAP,KAAYiB,EAAZ,KAEMC,EAAqB,WACvB,OAAOpB,EAAOC,EAAUC,GAyBtBmB,EAAkBrB,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAGzD,OAEI,eAAC,EAAD,CAASR,MAAM,wBAAf,UACI,cAAC,EAAD,CACIa,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA1BW,SAACc,GAGpB,OAFaA,EAAEC,OAAOC,QAAQC,QAG1B,IAAK,OACDR,GAAQ,SAACS,GAAD,OAAUA,EAAO,KACzB,MACJ,IAAK,UACDR,GAAW,SAACQ,GAAD,OAAUA,EAAO,KAC5B,MACJ,IAAK,MACDP,GAAO,SAACO,GAAD,OAAUA,EAAO,KACxB,MACJ,QACI,WAcJ,gCACI,4CACCL,EACG,cAAC,EAAD,CACIrB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOiB,IACPhB,mBAvCTuB,KAAKC,MAAO5B,EAAOoB,IAAwB,OA0CtC,cAAC,EAAD,CAAcN,QAAQ,6BCrD1Ce,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,MAAQ,4B,kBCA1BD,EAAOC,QAAU,CAAC,UAAY,8B","file":"static/js/main.2888ed69.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from 'components/Section/Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n    return (\r\n        <div>\r\n            <h2 className={css.titleName}>{title}</h2>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node,\r\n};\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from 'components/Statistics/Statistics.module.css';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n    return (\r\n        <>\r\n            <p className={css.names}>Good: {good}</p>\r\n            <p className={css.names}>Neutral: {neutral}</p>\r\n            <p className={css.names}>Bad: {bad}</p>\r\n            <p className={css.names}>Total: {total}</p>\r\n            <p className={css.names}>Positive feedback: {positivePercentage}% </p>\r\n        </>\r\n    );\r\n}\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n    return (\r\n        <div>\r\n            {options.map((option) => (\r\n                <button\r\n                    key={option}\r\n                    type=\"button\"\r\n                    data-action={option}\r\n                    onClick={onLeaveFeedback}\r\n                >\r\n                    {option}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n    return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import { React, useState } from 'react';\r\nimport Section from './Section/Section';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Notification from './Notification/Notification';\r\n\r\nfunction App() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n\r\n    const countTotalFeedback = () => {\r\n        return good + neutral + bad;\r\n    };\r\n\r\n    const countPositiveFeedbackPercentage = () => {\r\n        return Math.round((good / countTotalFeedback()) * 100);\r\n    };\r\n\r\n    const handleFeedback = (e) => {\r\n        const name = e.target.dataset.action;\r\n\r\n        switch (name) {\r\n            case \"good\":\r\n                setGood((prev) => prev + 1);\r\n                break;\r\n            case \"neutral\":\r\n                setNeutral((prev) => prev + 1);\r\n                break;\r\n            case \"bad\":\r\n                setBad((prev) => prev + 1);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const isFeedbackGiven = good > 0 || neutral > 0 || bad > 0;\r\n\r\n\r\n    return (\r\n\r\n        <Section title=\"Please leave feedback\">\r\n            <FeedbackOptions\r\n                options={[\"good\", \"neutral\", \"bad\"]}\r\n                onLeaveFeedback={handleFeedback}\r\n            />\r\n            <div>\r\n                <h2>Statistics</h2>\r\n                {isFeedbackGiven ? (\r\n                    <Statistics\r\n                        good={good}\r\n                        neutral={neutral}\r\n                        bad={bad}\r\n                        total={countTotalFeedback()}\r\n                        positivePercentage={countPositiveFeedbackPercentage()}\r\n                    />\r\n                ) : (\r\n                    <Notification message=\"No feedback given\" />\r\n                )}\r\n            </div>\r\n        </Section>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"names\":\"Statistics_names__3AB7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleName\":\"Section_titleName__1jzwr\"};"],"sourceRoot":""}